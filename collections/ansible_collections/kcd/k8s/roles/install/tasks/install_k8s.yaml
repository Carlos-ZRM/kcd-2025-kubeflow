---

- name: Check if helm is installed
  ansible.builtin.stat:
    path: /usr/bin/helm
  register: helm_installed

- name: Install helm
  ansible.builtin.uri:
    url: https://mirror.openshift.com/pub/openshift-v4/clients/helm/latest/helm-linux-amd64
    dest: /usr/bin/helm
    mode: '0755'
  become: true
  when: not helm_installed.stat.exists

- name: Download kustomize from GitHub
  ansible.builtin.get_url:
    url: https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize%2Fv5.6.0/kustomize_v5.6.0_linux_amd64.tar.gz
    dest: /tmp/kustomize_v5.6.0_linux_amd64.tar.gz
    mode: '0644'
  become: true

- name: Uncompress kustomize
  ansible.builtin.unarchive:
    src: /tmp/kustomize_v5.6.0_linux_amd64.tar.gz
    dest: /tmp/
    remote_src: true
  become: true

- name: Move kustomize binary to /usr/bin
  ansible.builtin.command:
    cmd: mv /tmp/kustomize /usr/bin/kustomize
  become: true

- name: Set executable permissions for kustomize
  ansible.builtin.file:
    path: /usr/bin/kustomize
    mode: '0755'
    owner: root
    group: root
  become: true

- name: Pulling images with kubeadm
  ansible.builtin.shell:
    cmd: "kubeadm config images pull"
  become: true
# tasks file for single_node

- name: Run Kubeadm init
  ansible.builtin.command:
    cmd: "kubeadm init"
    creates: /etc/kubernetes/manifests/etcd.yaml
  become: true

- name: Create kubeconfig directory
  ansible.builtin.file:
    state: directory
    path: "/home/{{ item }}/.kube"
    owner: "{{ item }}"
    group: users
    mode: '0755'
  become: true
  loop:
    - sope
    - lab-user

- name: Copy kubeconfig
  ansible.builtin.copy:
    src: /etc/kubernetes/admin.conf
    dest: "/home/{{ item }}/.kube/config"
    owner: "{{ item }}"
    group: users
    mode: '0600'
    remote_src: true
  become: true
  loop:
    - sope
    - lab-user

- name: Change kubeconfig owner
  ansible.builtin.file:
    path: "/home/{{ item }}/.kube/config"
    owner: "{{ item }}"
    group: users
    mode: '0600'
  become: true
  loop:
    - sope
    - lab-user

- name: Install cillium
  kubernetes.core.helm:
    name: cilium
    chart_ref: cilium
    release_namespace: kube-system
    chart_version: 1.17.0
    state: present
    chart_repo_url: https://helm.cilium.io/
    kubeconfig: /etc/kubernetes/admin.conf
    values:
      operator:
        replicas: 1
  become: true

- name: Search for not running pods in kube-system
  kubernetes.core.k8s_info:
    kind: Pod
    field_selectors:
      - status.phase!=Running
    namespace: kube-system
    kubeconfig: /etc/kubernetes/admin.conf
  become: true
  register: not_running_pods

- name: Delete not running pods in kube-system
  kubernetes.core.k8s:
    state: absent
    kind: Pod
    name: "{{ item.metadata.name }}"
    namespace: kube-system
    become: true
  loop: "{{ not_running_pods.resources }}"
  become: true

- name: Check if control plane is schedulable
  ansible.builtin.command:
    cmd: kubectl get nodes -o jsonpath='{.items[*].spec.taints}'
  register: control_plane_taints
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf
  become: true

- name: Make control plane schedulable
  ansible.builtin.command:
    cmd: kubectl taint nodes --all node-role.kubernetes.io/control-plane-
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf
  become: true
  when: "'node-role.kubernetes.io/control-plane' in control_plane_taints.stdout"

- name: Add helm repository for metrics server
  kubernetes.core.helm_repository:
    name: metrics-server
    repo_url: https://kubernetes-sigs.github.io/metrics-server/
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf
  become: true

- name: Install metrics-server
  kubernetes.core.helm:
    name: metrics-server
    chart_ref: metrics-server/metrics-server
    release_name: metrics-server
    release_namespace: kube-system
    state: present
    kubeconfig: /etc/kubernetes/admin.conf
    values:
      apiService:
        insecureSkipTLSVerify: true
  become: true
  tags:
    - metrics-server
  #--kubelet-insecure-tls

- name: Add kubelet-insecure-tls to metrics-server deployment using JSON patch
  kubernetes.core.k8s_json_patch:
    kind: Deployment
    namespace: kube-system
    name: metrics-server
    patch:
      - op: add
        path: /spec/template/spec/containers/0/args/-
        value: --kubelet-insecure-tls
    kubeconfig: /etc/kubernetes/admin.conf
  become: true