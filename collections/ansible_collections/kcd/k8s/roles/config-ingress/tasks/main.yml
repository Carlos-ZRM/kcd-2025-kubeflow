---
# tasks file for config-ingress

- name: Create directory for certs
  ansible.builtin.file:
    path: /etc/ssl/sope.local
    state: directory
    mode: '0755'
    owner: root
    group: root
  become: true

- name: Generate an OpenSSL private key CA
  community.crypto.openssl_privatekey:
    path: /etc/ssl/sope.local/ca-{{ config_ingress_k8s_domain }}.pem
    type: Ed25519
  become: true
    #curve: secp256r1

- name: Generate an OpenSSL Certificate Signing Request CA
  community.crypto.openssl_csr:
    path: /etc/ssl/sope.local/ca-{{ config_ingress_k8s_domain }}.csr
    privatekey_path: /etc/ssl/sope.local/ca-{{ config_ingress_k8s_domain }}.pem
    common_name: "{{ config_ingress_k8s_domain }}"
    basic_constraints:
      - CA:TRUE
  become: true

- name: Generate a root CA
  community.crypto.x509_certificate:
    path: /etc/ssl/sope.local/ca-{{ config_ingress_k8s_domain }}.crt
    privatekey_path: /etc/ssl/sope.local/ca-{{ config_ingress_k8s_domain }}.pem
    csr_path: /etc/ssl/sope.local/ca-{{ config_ingress_k8s_domain }}.csr
    provider: selfsigned
  become: true

- name: Generate an OpenSSL private key for domain
  community.crypto.openssl_privatekey:
    path: /etc/ssl/sope.local/{{ config_ingress_k8s_domain }}.pem
    type: Ed25519
  become: true

- name: Generate an OpenSSL Certificate Signing Request for domain
  community.crypto.openssl_csr:
    path: /etc/ssl/sope.local/{{ config_ingress_k8s_domain }}.csr
    privatekey_path: /etc/ssl/sope.local/{{ config_ingress_k8s_domain }}.pem
    common_name: "{{ config_ingress_k8s_domain }}"
  become: true

- name: Create namespaces for k8s services
  kubernetes.core.k8s:
    state: present
    kind: Namespace
    name: "{{ item }}"
    kubeconfig: /etc/kubernetes/admin.conf
  loop:
    - nginx-ingress
    - kubernetes-dashboard
  become: true

- name: Check if nginx helm repo is installed
  ansible.builtin.command:
    cmd: helm list -n nginx-ingress --no-headers
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf
  register: helm_repo
  become: true

- name: Install nginx ingress with helm
  ansible.builtin.command:
    cmd: helm install default oci://ghcr.io/nginx/charts/nginx-ingress --version 2.0.1 --namespace nginx-ingress  --set "controller.enableTLSPassthrough=true"
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf
  when: helm_repo.rc != 0 or helm_repo.stdout == ""
  become: true

- name: Get NodePort of default-nginx-ingress-controller service
  kubernetes.core.k8s_info:
    kind: Service
    namespace: nginx-ingress
    name: default-nginx-ingress-controller
    kubeconfig: /etc/kubernetes/admin.conf
  register: ingress_service
  become: true

- name: Extract NodePort for port 80
  ansible.builtin.set_fact:
    ingress_nodeport_80: "{{ ingress_service.resources[0].spec.ports | selectattr('port', 'equalto', 80) | map(attribute='nodePort') | first }}"
  become: true

- name: Extract NodePort for port 443
  ansible.builtin.set_fact:
    ingress_nodeport_443: "{{ ingress_service.resources[0].spec.ports | selectattr('port', 'equalto', 443) | map(attribute='nodePort') | first }}"
  become: true

- name: Debug NodePort
  ansible.builtin.debug:
    msg: "The NodePort for default-nginx-ingress-controller on port 80 is {{ ingress_nodeport_80 }} and on port 443 is {{ ingress_nodeport_443 }}"

- name: Create HAProxy configuration for nginx ingress controller
  ansible.builtin.template:
    src: "{{ item }}"
    dest: /etc/haproxy/conf.d/{{ item | regex_replace('.j2', '') }}
    owner: root
    group: root
    mode: '0644'
  become: true
  loop:
    - nginx-controller-https.cfg.j2
    - nginx-controller-http.cfg.j2

- name: Reload HAProxy service
  ansible.builtin.service:
    name: haproxy
    state: reloaded
  become: true

- name: Install kube dashboard with helm
  kubernetes.core.helm:
    name: my-dashboard
    chart_ref: kubernetes-dashboard
    release_namespace: kubernetes-dashboard
    state: present
    chart_repo_url: https://kubernetes.github.io/dashboard/
    kubeconfig: /etc/kubernetes/admin.conf
  become: true
  tags:
    - k8s-dashboard

- name: Create ingress for kube dashboard
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('template', 'insgress-dashboard.yaml.j2') | from_yaml }}"
  tags:
    - k8s-dashboard

- name: Create service account for dashboard
  kubernetes.core.k8s:
    state: present
    kind: ServiceAccount
    name: sope-admin
    namespace: kubernetes-dashboard
    kubeconfig: /etc/kubernetes/admin.conf
  become: true
  tags:
    - k8s-dashboard

- name: Create cluster role binding for dashboard
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        name: sope-admin
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: cluster-admin
      subjects:
      - kind: ServiceAccount
        name: sope-admin
        namespace: kubernetes-dashboard
    kubeconfig: /etc/kubernetes/admin.conf
  become: true
  tags:
    - k8s-dashboard

- name: Create token for dashboard
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: sope-admin-token
        annotations:
          kubernetes.io/service-account.name: sope-admin
      type: kubernetes.io/service-account-token
    namespace: kubernetes-dashboard
    kubeconfig: /etc/kubernetes/admin.conf
  become: true
  register: token
  tags:
    - k8s-dashboard
